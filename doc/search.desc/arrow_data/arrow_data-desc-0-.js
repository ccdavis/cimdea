searchState.loadedDescShard("arrow_data", 0, "Low-level array data abstractions for Apache Arrow Rust\nBuffer is always null. Unused currently in Rust …\nA generic representation of Arrow array data which …\nBuilder for <code>ArrayData</code> type\nBuffer holds a bitmap.\nLayout specification for a single data type buffer\nLayout specification for a data type\nEach element is a fixed width primitive, with the given …\nVariable width, such as string data for utf8 data\nVerifies that the buffers meet the minimum alignment …\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nReturns the <code>buffer</code> as a slice of type <code>T</code> starting at …\nThe buffer index.\nReturns the <code>Buffer</code> storing data for this <code>ArrayData</code>\nA vector of buffer layout specifications, one for each …\nCreates an array data, validating all inputs\nCreates an array data, validating all inputs, and aligning …\nCreates an array data, without any validation\nReturns a builder to construct a <code>ArrayData</code> instance of the …\nCan contain a null bitmask\nReturns a slice of children <code>ArrayData</code>. This will be non …\nReturns a reference to the <code>DataType</code> of this <code>ArrayData</code>\nContains declarations to bind to the C Data Interface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory occupied by the\nReturns the total number of the bytes of memory occupied by\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>ArrayData</code> into an <code>ArrayDataBuilder</code>\nReturns whether this <code>ArrayData</code> is empty\nReturns whether the element at index <code>i</code> is null\nReturns whether the element at index <code>i</code> is not null\nReturn the expected <code>DataTypeLayout</code> Arrays of this data …\nReturns the length (i.e., number of elements) of this …\nThe length of the string/bytes.\nDescribes a basic numeric array where each element has a …\nReturns a new empty ArrayData valid for <code>data_type</code>.\nDescribes arrays which have no data of their own (e.g. …\nDescribes a basic numeric array where each element has …\nReturns a new <code>ArrayData</code> valid for <code>data_type</code> containing <code>len</code> …\nCreate a new ArrayData instance;\nDescribes a view type\nReturns the total number of nulls in this array\nReturns a reference to the null buffer of this <code>ArrayData</code> …\nReturns the offset of this <code>ArrayData</code>\nThe offset into the buffer.\nFirst 4 bytes of string/bytes data.\nReturns true if this <code>ArrayData</code> is equal to <code>other</code>, using …\nCreates a zero-copy slice of itself. This creates a new …\nCreate a new ArrayData, validating that the provided …\n“cheap” validation of an <code>ArrayData</code>. Ensures buffers are\nValidates the combination of <code>views</code> and <code>buffers</code> is a valid …\nValidate that the data contained within this <code>ArrayData</code> is …\nPerforms a full recursive validation of this <code>ArrayData</code> and …\nValidates the values stored within this <code>ArrayData</code> are valid\nValidates the combination of <code>views</code> and <code>buffers</code> is a valid …\nValidates the values stored within this <code>ArrayData</code> are valid\nThis field only applies to the view type …\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BitIterator</code> from the provided <code>buffer</code>, and …\nCreate a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …\nCreate a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …\nCalls the provided closure for each index in the provided …\nSets all bits on <code>write_data</code> in the range …\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal128 and …\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i128</code> …\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i128</code> …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nABI-compatible struct for ArrowArray from C Data Interface …\nReturns the buffer at the provided index\nReturns the child at the provided index\nReturns the dictionary if any\ncreate an empty <code>FFI_ArrowArray</code>, which can be used to …\nReturns the argument unchanged.\nTakes ownership of the pointed to <code>FFI_ArrowArray</code>\nCalls <code>U::from(self)</code>.\nwhether the array is empty\nWhether the array has been released\nthe length of the array\ncreates a new <code>FFI_ArrowArray</code> from existing data.\nthe null count of the array\nReturns the number of buffers\nReturns the number of children\nthe offset of the array\nDon’t preallocate inner buffers and rely on array growth …\nBinary, Utf8 and LargeUtf8 data types Define\nDefine capacities of child data or data buffers.\nDictionary type\nList and LargeList data types Define\nStruct to efficiently and interactively create an ArrayData…\nStruct type\nExtends this array with a chunk of its source arrays\nExtends this MutableArrayData with null elements, …\nCreates a ArrayData from the pushed regions up to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a ArrayDataBuilder from the pushed regions up to …\nReturns true if len is 0\nReturns the current length\nreturns a new MutableArrayData with capacity to <code>capacity</code> …\nReturns the current null count\nSimilar to MutableArrayData::new, but lets users define …")