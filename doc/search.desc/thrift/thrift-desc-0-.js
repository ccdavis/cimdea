searchState.loadedDescShard("thrift", 0, "Rust runtime library for the Apache Thrift RPC system.\nThe transport channel cannot be opened because it was …\nErrors encountered within auto-generated code, or when …\nInformation about errors in auto-generated code or in …\nAuto-generated or user-implemented code error categories.\nReceived an out-of-order Thrift message.\nUnsupported or unknown Thrift protocol version.\nReached the maximum nested depth to which an encoded …\nA read could not complete because no bytes were available.\nContains the error value\nError type returned by all runtime library functions.\nAuto-generated code failed unexpectedly.\nAn invalid argument was supplied to a library function, or …\nReceived an unknown Thrift message type. That is, not one …\nThrift endpoint requested, or is using, an unsupported …\n<em>Unknown</em>. Included only for compatibility with existing …\nService reply is missing required fields.\nAn invalid (buffer/message) size was requested or received.\nAn invalid size was received in an encoded field.\nUnsupported Thrift protocol, server or field type.\nAn I/O operation was attempted when the transport channel …\nContains the success value\nA wrapper around floats providing implementations of <code>Eq</code>, …\nErrors encountered during runtime-library processing.\nInformation about errors that occur in the runtime library.\nThrift protocol error. When possible use …\nRuntime library error categories.\nResult type returned by all runtime library functions.\nToo large a buffer or message size was requested or …\nThrift message or field was too long.\nSpecifies the minimum functionality an auto-generated …\nAn I/O operation timed out.\nErrors encountered while operating on I/O channels.\nInformation about I/O errors.\nI/O error categories.\nCatch-all I/O error.\nCatch-all runtime-library error.\nCatch-all application error.\nMade service call to an unknown service method.\nThrift endpoint requested, or is using, an unsupported …\nIDL-defined exception structs.\nMethod name in a service reply does not match the name of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a &amp;str to <code>OrderedFloat</code>. Returns an error if the …\nReturns the input protocol used to read serialized Thrift …\nIncrements the sequence number, indicating that a message …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value out.\nI/O error variant.\nProtocol error variant.\nApplication error variant.\nHuman-readable error message.\nHuman-readable error message.\nHuman-readable error message.\nCreate a new <code>TransportError</code>.\nCreate a new <code>ProtocolError</code>.\nCreate a new <code>ApplicationError</code>.\nCreate a new <code>Error</code> instance of type <code>Application</code> that wraps …\nCreate a new <code>Error</code> instance of type <code>Protocol</code> that wraps a …\nCreate a new <code>Error</code> instance of type <code>Transport</code> that wraps a …\nReturns the output protocol used to write serialized …\nTypes used to send and receive primitives between a Thrift …\nCreate an <code>ApplicationError</code> from its wire representation.\nReturns the sequence number of the last message written to …\nTypes used to send and receive bytes over an I/O channel.\nConvert an <code>ApplicationError</code> into its wire representation …\nBoolean.\nService-call request.\nDouble-precision number.\nUnexpected error in the remote service.\nSigned 8-bit int.\nSigned 16-bit int.\nSigned 32-bit int.\nSigned 64-bit int.\nList.\nMap.\nOne-way service-call request (no response is expected).\nService-call response.\nSet.\nIndicates that there are no more serialized fields in this …\nUTF-8 string.\nThrift struct.\nRead messages encoded in the Thrift simple binary encoding.\nFactory for creating instances of <code>TBinaryInputProtocol</code>.\nWrite messages using the Thrift simple binary encoding.\nFactory for creating instances of <code>TBinaryOutputProtocol</code>.\nRead messages encoded in the Thrift compact protocol.\nFactory for creating instances of <code>TCompactInputProtocol</code>.\nWrite messages using the Thrift compact protocol.\nFactory for creating instances of <code>TCompactOutputProtocol</code>.\nThrift field identifier.\nConverts a stream of bytes into Thrift identifiers, …\nHelper type used by servers to create <code>TInputProtocol</code> …\nThrift list identifier.\nThrift map identifier.\nThrift message identifier.\nThrift message types.\n<code>TOutputProtocol</code> that prefixes the service name to all …\nConverts Thrift identifiers, primitives, containers or …\nHelper type used by servers to create <code>TOutputProtocol</code> …\nReads and writes the struct to Thrift protocols.\nThrift set identifier.\n<code>TInputProtocol</code> required to use a <code>TMultiplexedProcessor</code>.\nThrift struct identifier.\nThrift struct-field types.\nUTF-16 string. <em>Unsupported</em>.\nUTF-7 string. <em>Unsupported</em>.\nUTF-8 string.\nVoid (<code>()</code>) field.\nCreate a <code>TOutputProtocol</code> that writes bytes to <code>transport</code>.\nType of the elements in the list.\nType of the elements in the set.\nExtract the field id from a Thrift field identifier.\nField type.\nFlush buffered bytes to the underlying transport.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThrift field id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap key type.\nMessage type.\nService call the message is associated with.\nName of the encoded Thrift struct.\nName of the Thrift field.\nCreate a <code>TStoredInputProtocol</code> that delegates all calls …\nCreate a <code>TBinaryInputProtocol</code> that reads bytes from …\nCreate a <code>TBinaryInputProtocolFactory</code>.\nCreate a <code>TBinaryOutputProtocol</code> that writes bytes to …\nCreate a <code>TBinaryOutputProtocolFactory</code>.\nCreate a <code>TCompactInputProtocol</code> that reads bytes from …\nCreate a <code>TCompactInputProtocolFactory</code>.\nCreate a <code>TCompactOutputProtocol</code> that writes bytes to …\nCreate a <code>TCompactOutputProtocolFactory</code>.\nCreate a <code>TMultiplexedOutputProtocol</code> that identifies …\nCreate a <code>TMessageIdentifier</code> for a Thrift service-call …\nCreate a <code>TStructIdentifier</code> for a struct named <code>name</code>.\nCreate a <code>TFieldIdentifier</code> for a field named <code>name</code> with type …\nCreate a <code>TListIdentifier</code> for a list with <code>size</code> elements of …\nCreate a <code>TSetIdentifier</code> for a set with <code>size</code> elements of …\nCreate a <code>TMapIdentifier</code> for a map with <code>size</code> entries of type\nRead a bool.\nRead an unsigned byte.\nRead a fixed-length byte array.\nRead a 64-bit float.\nRead the beginning of a Thrift struct field.\nRead the end of a Thrift struct field.\nRead a 16-bit signed integer.\nRead a 32-bit signed integer.\nRead a 64-bit signed integer.\nRead a word.\nRead the beginning of a list.\nRead the end of a list.\nRead the beginning of a map.\nRead the end of a map.\nRead the beginning of a Thrift message.\nRead the end of a Thrift message.\nRead the beginning of a set.\nRead the end of a set.\nRead a fixed-length string (not null terminated).\nRead the beginning of a Thrift struct.\nRead the end of a Thrift struct.\nOrdered sequence number identifying the message.\nNumber of elements in the list.\nNumber of elements in the set.\nNumber of entries in the map.\nSkip a field with type <code>field_type</code> recursively until the …\nSkip a field with type <code>field_type</code> recursively up to <code>depth</code> …\nMap value type.\nCompare the expected message type <code>expected</code> with the …\nCompare the expected message sequence number <code>expected</code> with …\nCompare the expected service-call name <code>expected</code> with the …\nCheck if a required Thrift struct field exists.\nWrite a bool.\nWrite an unsigned byte.\nWrite a fixed-length byte array.\nWrite a 64-bit float.\nWrite the beginning of a Thrift field.\nWrite the end of a Thrift field.\nWrite a STOP field indicating that all the fields in a …\nWrite a 16-bit signed integer.\nWrite a 32-bit signed integer.\nWrite a 64-bit signed integer.\nWrite an 8-bit signed integer.\nWrite the beginning of a list.\nWrite the end of a list.\nWrite the beginning of a map.\nWrite the end of a map.\nWrite the beginning of a Thrift message.\nWrite the end of a Thrift message.\nWrite the beginning of a set.\nWrite the end of a set.\nWrite a fixed-length string.\nWrite the beginning of a Thrift struct.\nWrite the end of a Thrift struct.\nThe readable half of an object returned from …\nIn-memory read and write channel with fixed-size read and …\nTransport that reads messages via an internal buffer.\nFactory for creating instances of <code>TBufferedReadTransport</code>.\nTransport that writes messages via an internal buffer.\nFactory for creating instances of <code>TBufferedWriteTransport</code>.\nTransport that reads framed messages.\nFactory for creating instances of <code>TFramedReadTransport</code>.\nTransport that writes framed messages.\nFactory for creating instances of <code>TFramedWriteTransport</code>.\nIdentifies a splittable bidirectional I/O channel used to …\nIdentifies a transport used by a <code>TInputProtocol</code> to receive …\nHelper type used by a server to create <code>TReadTransport</code> …\nBidirectional TCP/IP channel.\nIdentifies a transport used by <code>TOutputProtocol</code> to send …\nHelper type used by a server to create <code>TWriteTransport</code> …\nThe writable half of an object returned from …\nShut down this channel.\nOverwrites the contents of the read buffer with the …\nCreate a <code>TTransport</code> that wraps a channel over which bytes …\nCreate a <code>TTransport</code> that wraps a channel over which bytes …\nCreate a <code>TBufferedReadTransport</code>.\nCreate a <code>TBufferedWriteTransport</code>.\nCreate a <code>TFramedReadTransport</code>.\nCreate a <code>TFramedWriteTransport</code>.\nReset the number of readable bytes to zero.\nResets the internal write buffer, making it seem like no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>TBufferedTransport</code> with default-sized internal …\nCreate a <code>TBufferedTransport</code> with default-sized internal …\nCreate a <code>TFramedReadTransport</code> with a default-sized …\nCreate a <code>TFramedWriteTransport</code> with default-sized internal …\nCreate an uninitialized <code>TTcpChannel</code>.\nCreate a <code>ReadHalf</code> associated with readable <code>handle</code>\nCreate a <code>WriteHalf</code> associated with writable <code>handle</code>\nConnect to <code>remote_address</code>, which should implement …\nReturn a copy of the bytes held by the internal read …\nCopy bytes from the source buffer <code>buf</code> into the internal …\nSplit the channel into a readable half and a writable …\nCreate a <code>TBufferedTransport</code> with an internal read buffer …\nCreate a <code>TBufferedTransport</code> with an internal read buffer …\nCreate a <code>TFramedTransport</code> with an internal read buffer of …\nCreate a <code>TFramedWriteTransport</code> with an internal write …\nConstructs a new, empty <code>TBufferChannel</code> with the given read …\nCreate a <code>TTcpChannel</code> that wraps an existing <code>TcpStream</code>.\nReturn a copy of the bytes held by the internal write …")