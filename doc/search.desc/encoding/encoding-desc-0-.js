searchState.loadedDescShard("encoding", 0, "Encoding 0.2.33\nA list of all supported encodings. Useful for encodings …\nCodec implementations.\nAn interface for retrieving an encoding (or a set of …\nInterface to the character encoding.\nReturns a list of references to the encodings available.\n7-bit ASCII encoding.\nA placeholder encoding that returns encoder/decoder error …\nLegacy Japanese encodings based on JIS X 0208 and JIS X …\nLegacy Korean encodings based on KS X 1001.\nLegacy simplified Chinese encodings based on GB 2312 and …\nCommon codec implementation for single-byte encodings.\nLegacy traditional Chinese encodings.\nUTF-16.\nUTF-8, the universal encoding.\nAsymmetric or special encoding constructions required by …\nA decoder for ASCII.\nAn encoder for ASCII.\nASCII, also known as ISO/IEC 646:US.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA decoder that always returns error.\nAn encoder that always returns error.\nAn encoding that returns encoder/decoder error for every …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn encoder for EUC-JP with unused G3 character set.\nEUC-JP. (XXX with asymmetric JIS X 0212 support)\nAn encoder for ISO-2022-JP without JIS X 0212/0213 support.\nISO-2022-JP.\nAn encoder for Shift_JIS with IBM/NEC extensions.\nWindows code page 932, i.e. Shift_JIS with IBM/NEC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn encoder for Windows code page 949.\nWindows code page 949.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn implementation type for GB18030.\nA type for GB18030.\nAn instance for GB18030.\nAn encoder for GBK and GB18030.\nGBK and GB 18030-2005.\nAn implementation type for GBK.\nA type for GBK.\nAn instance for GBK.\nAn encoder for HZ.\nHZ. (RFC 1843)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA decoder for single-byte encodings based on ASCII.\nAn encoder for single-byte encodings based on ASCII.\nA common framework for single-byte encodings based on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlgorithmic mapping for ISO 8859-1.\nAn encoder for Big5-2003.\nBig5-2003 with common extensions. (XXX with asymmetric …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn implementation type for big endian.\nAn implementation type for little endian.\nA type for UTF-16 in big endian.\nA decoder for UTF-16.\nAn encoder for UTF-16.\nUTF-16 (UCS Transformation Format, 16-bit).\nA type for UTF-16 in little endian.\nAn instance for UTF-16 in big endian.\nAn instance for UTF-16 in little endian.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA decoder for UTF-8.\nAn encoder for UTF-8.\nUTF-8 (UCS Transformation Format, 8-bit).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlmost equivalent to <code>std::str::from_utf8</code>. This function is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReplacement encoding used to solve a particular attack …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlgorithmic mapping for <code>x-user-defined</code> encoding.\nReturns an encoding from given label, defined in the …\nReturns an encoding from Windows code page number. …\nByte writer used by encoders. In most cases this will be …\nCalls given function to handle decoder errors. The …\nCalls given function to handle encoder errors. The …\nError information from either encoder or decoder.\nTrap, which handles decoder errors.\nA type of the bare function in <code>DecoderTrap</code> values.\nA type of the bare function in <code>EncoderTrap</code> values.\nCharacter encoding.\nA trait object using dynamic dispatch which is a sendable …\nSilently ignores an error, effectively replacing it with …\nSilently ignores an error, effectively replacing it with …\nReplaces an error with XML numeric character references …\nDecoder converting a byte sequence into a Unicode string. …\nEncoder converting a Unicode string into a byte sequence. …\nReplaces an error with a U+FFFD (decoder). Corresponds to …\nReplaces an error with <code>?</code> in given encoding. Note that this …\nImmediately fails on errors. Corresponds to WHATWG “fatal…\nImmediately fails on errors. Corresponds to WHATWG “fatal…\nString writer used by decoders. In most cases this will be …\nA human-readable cause of the error.\nDetermine the encoding by looking for a Byte Order Mark …\nAn easy-to-use interface to <code>RawDecoder</code>. On the decoder …\nDecode into a <code>StringWriter</code>.\nAn easy-to-use interface to <code>RawEncoder</code>. On the encoder …\nEncode into a <code>ByteWriter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a fresh <code>RawEncoder</code> instance which parameters are …\nCreates a fresh <code>RawDecoder</code> instance which parameters are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this encoding is compatible to ASCII, i.e. …\nReturns true if this encoding is compatible to ASCII, i.e. …\nReturns the canonical name of given encoding. This name is …\nCreates a new decoder.\nCreates a new encoder.\nFeeds given portion of string to the encoder, pushes the …\nFeeds given portion of byte sequence to the encoder, …\nFinishes the encoder, pushes the an encoded byte sequence …\nFinishes the decoder, pushes the a decoded string at the …\nHandles a decoder error. May write to the output writer. …\nHandles an encoder error. May write to the output writer. …\nThe byte position of the first remaining byte, with …\nReturns a name of given encoding defined in the WHATWG …\nWrites a single byte.\nWrites a number of bytes.\nWrites a single character.\nWrites a string.\nHints an expected lower bound on the length (in bytes) of …\nHints an expected lower bound on the length (in bytes) of …")