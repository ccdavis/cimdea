searchState.loadedDescShard("cimdea", 0, "This module provides structs and methods for loading …\nThe Household - Person record structure is the default for …\nEvery dataset in a collection will have these same …\nThe “metadata” models serve to assist working with …\nSupports reading the “layout” files from IPUMS …\nThis is an exploratory module to try out ideas for …\nRequests describe requested IPUMS data either as an …\nThis is the mutable state  created and passed around …\nKey characteristics of collections like all USA Census …\nThere is a master Vec with Variables by IpumsVariableId …\nThe valid cross-products\nAny output_data/current path with ./layouts and ./parquet …\nThe owning structs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBased on name, use default data root and product root and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad all variables and samples for the context and the …\nUses default product_root to find metadata database and …\nLoad everything available for the selected variables and …\nWhen called, the context should be already set to read …\nThe context should be set to read from layouts or full …\nUsing the data_root, scan the layouts and load metadata …\nA product name like USA, IPUMSI, CPS etc\nFormats the exact paths needed to get data for this …\nThe owning structs\nThere are default configurations for USA, IPUMSI and CPS …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ‘id’ fields in the models are generated when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn entry (a single line) from a layout file. There’s one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Abacus Request type contains variables to tabulate, …\nEvery data request should serialize, deserialize, and …\nThe <code>SimpleRequest</code> probably can describe 90% of IPUMS …\nConvert from the Tractor / generic JSON representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccepts a single JSON with keys for Request, Subpop and …\nBuild request from a basic set of variable and dataset …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrint a human readable codebook\nPrint a machine readable Stata codebook\nTo the Tractor / generic IPUMS representation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")