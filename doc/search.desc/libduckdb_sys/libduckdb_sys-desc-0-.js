searchState.loadedDescShard("libduckdb_sys", 0, "Library used incorrectly\nAuthorization denied\nUnable to open the database file\nAbort due to constraint violation\n! An enum over DuckDB’s internal types.\nThe database file is locked\nThe database disk image is malformed\nA table in the database is locked\nInsertion failed because database is full\nError Codes\nDatabase lock protocol error\nInternal logic error in SQLite\nUses OS features not supported on host\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nFile opened that is not a database file\nUnknown opcode in sqlite3_file_control()\nCallback routine requested an abort\nOperation terminated by sqlite3_interrupt()\nA malloc() failed\n2nd parameter to sqlite3_bind out of range\nAccess permission denied\nAttempt to write a readonly database\nThe database schema changed\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome kind of disk I/O error occurred\nString or BLOB exceeds size limit\nData type mismatch\nSQL error or missing database\n! The appender enables fast data loading into DuckDB. ! …\n! Holds an arrow query result. Must be destroyed with …\n! Holds an arrow array. Remember to release the respective …\n! Holds an arrow schema. Remember to release the …\n! Holds an arrow array stream. Must be destroyed with …\n! Can be used to provide start-up options for the DuckDB …\n! A connection to a duckdb database. Must be closed with …\n! Contains a data chunk from a duckdb_result. ! Must be …\n! A database object. Should be closed with <code>duckdb_close</code>.\n! Extracted statements. Must be destroyed with …\n! Holds an internal logical type. ! Must be destroyed with …\n! The pending result represents an intermediate structure …\n! A prepared statement is a parameterized query that …\n! Holds a DuckDB value, which wraps a type. ! Must be …\n! A vector to a specified column in a data chunk. Lives as …\nAdd a replacement scan definition to the specified …\nAppend a blob value to the appender.\nAppend a bool value to the appender.\nAppends a pre-filled data chunk to the specified appender.\nAppend a duckdb_date value to the appender.\nAppend a double value to the appender.\nAppend a float value to the appender.\nAppend a duckdb_hugeint value to the appender.\nAppend an int16_t value to the appender.\nAppend an int32_t value to the appender.\nAppend an int64_t value to the appender.\nAppend an int8_t value to the appender.\nAppend a duckdb_interval value to the appender.\nAppend a NULL value to the appender (of any type).\nAppend a duckdb_time value to the appender.\nAppend a duckdb_timestamp value to the appender.\nAppend a duckdb_uhugeint value to the appender.\nAppend a uint16_t value to the appender.\nAppend a uint32_t value to the appender.\nAppend a uint64_t value to the appender.\nAppend a uint8_t value to the appender.\nAppend a varchar value to the appender.\nAppend a varchar value to the appender.\n! The appender enables fast data loading into DuckDB. ! …\nA nop function, provided for backwards compatibility …\nClose the appender, flushing all intermediate state in the …\nReturns the number of columns in the table that belongs to …\nReturns the type of the column at the specified index.\nCreates an appender object.\nClose the appender and destroy it. Flushing all …\nFinish the current row of appends. After end_row is …\nReturns the error message associated with the given …\nFlush the appender to the table, forcing the cache of the …\nRetrieves the array size of the given array type.\nRetrieves the child type of the given array type.\nRetrieves the child vector of a array vector.\n! Holds an arrow query result. Must be destroyed with …\n! Holds an arrow array. Remember to release the respective …\nScans the Arrow array and creates a view with the given …\nReturns the number of columns present in the arrow result …\nReturns the number of rows present in the arrow result …\nReturns the number of rows changed by the query stored in …\nScans the Arrow stream and creates a view with the given …\n! Holds an arrow schema. Remember to release the …\n! Holds an arrow array stream. Must be destroyed with …\nAdds a result column to the output of the table function.\nBinds a blob value to the prepared statement at the …\nBinds a bool value to the prepared statement at the …\nBinds a duckdb_date value to the prepared statement at the …\nBinds a duckdb_decimal value to the prepared statement at …\nBinds a double value to the prepared statement at the …\nBinds a float value to the prepared statement at the …\nRetrieves the extra info of the function as set in …\nRetrieves a named parameter with the given name.\nRetrieves the parameter at the given index.\nRetrieves the number of regular (non-named) parameters to …\nBinds a duckdb_hugeint value to the prepared statement at …\n! The bind info of the function. When setting this info, …\nBinds an int16_t value to the prepared statement at the …\nBinds an int32_t value to the prepared statement at the …\nBinds an int64_t value to the prepared statement at the …\nBinds an int8_t value to the prepared statement at the …\nBinds a duckdb_interval value to the prepared statement at …\nBinds a NULL value to the prepared statement at the …\nRetrieve the index of the parameter for the prepared …\nSets the user-provided bind data in the bind object. This …\nSets the cardinality estimate for the table function, used …\nReport that an error has occurred while calling bind.\nBinds a duckdb_time value to the prepared statement at the …\nBinds a duckdb_timestamp value to the prepared statement …\nBinds an duckdb_uhugeint value to the prepared statement …\nBinds an uint16_t value to the prepared statement at the …\nBinds an uint32_t value to the prepared statement at the …\nBinds an uint64_t value to the prepared statement at the …\nBinds an uint8_t value to the prepared statement at the …\nBinds a value to the prepared statement at the specified …\nBinds a null-terminated varchar value to the prepared …\nBinds a varchar value to the prepared statement at the …\n! BLOBs are composed of a byte pointer and a size. You …\nClear the params bind to the prepared statement.\nCloses the specified database and de-allocates all memory …\n! A column consists of a pointer to its internal data. Don…\nReturns the number of columns present in a the result …\nDEPRECATED**: Prefer using <code>duckdb_result_get_chunk</code> instead.\nReturns the logical column type of the specified column.\nReturns the column name of the specified column. The …\nReturns the column type of the specified column.\n! Can be used to provide start-up options for the DuckDB …\nThis returns the total amount of configuration options …\nOpens a connection to a database. Connections are required …\n! A connection to a duckdb database. Must be closed with …\nCreates a array type from its child type. The resulting …\nCreates a array value from a type and an array of values …\nInitializes an empty configuration object that can be used …\nCreates an empty DataChunk with the specified set of types.\nCreates a <code>duckdb_logical_type</code> of type decimal with the …\nCreates an ENUM type from the passed member name array. …\nCreates a value from an int64\nCreates a list type from its child type. The resulting …\nCreates a list value from a type and an array of values of …\nCreates a <code>duckdb_logical_type</code> from a standard primitive …\nCreates a map type from its key type and value type. The …\nCreates a STRUCT type from the passed member name and type …\nCreates a struct value from a type and an array of values\nCreates a new empty table function.\nCreates a task state that can be used with …\nCreate a <code>duckdb_time_tz</code> object from micros and a timezone …\nCreates a UNION type from the passed types array. The …\nCreates a value from a null-terminated string\nCreates a value from a string\n! Contains a data chunk from a duckdb_result. ! Must be …\nRetrieves the number of columns in a data chunk.\nRetrieves the current number of tuples in a data chunk.\nRetrieves the vector at the specified column index in the …\nResets a data chunk, clearing the validity masks and …\nSets the current number of tuples in a data chunk.\n! A database object. Should be closed with <code>duckdb_close</code>.\n! Days are stored as days since 1970-01-01 ! Use the …\n! Decimals are composed of a width and a scale, and are …\nRetrieves the internal storage type of a decimal type.\nRetrieves the scale of a decimal type.\nConverts a duckdb_decimal object (as obtained from a …\nRetrieves the width of a decimal type.\n! The callback that will be called to destroy data, e.g., …\nCloses the result and de-allocates all memory allocated …\nReleases the arrow array stream and de-allocates its …\nDestroys the specified configuration object and …\nDestroys the data chunk and de-allocates all memory …\nDe-allocates all memory allocated for the extracted …\nDestroys the logical type and de-allocates all memory …\nCloses the pending result and de-allocates all memory …\nCloses the prepared statement and de-allocates all memory …\nCloses the result and de-allocates all memory allocated …\nDestroys the given table function object.\nDestroys the task state returned from …\nDestroys the value and de-allocates all memory allocated …\nCloses the specified connection and de-allocates all …\nConverts a double value to a duckdb_decimal object.\nConverts a double value to a duckdb_hugeint object.\nConverts a double value to a duckdb_uhugeint object.\nRetrieves the dictionary size of the enum type.\nRetrieves the dictionary value at the specified position …\nRetrieves the internal storage type of an enum type.\nExecute DuckDB tasks on this thread.\nFully execute a pending query result, returning the final …\nExecutes the prepared statement with the given bound …\nExecutes the prepared statement with the given bound …\nExecutes the prepared statement with the given bound …\nExecute DuckDB tasks on this thread.\nExecute DuckDB tasks on this thread.\nReturns true if the execution of the current query is …\nExtract all statements from a query. Note that after …\nReturns the error message contained within the extracted …\n! Extracted statements. Must be destroyed with …\nFinish execution on a specific task.\nFree a value returned from <code>duckdb_malloc</code>, …\nDecompose a <code>duckdb_date</code> object into year, month and date …\nDecompose a <code>duckdb_time</code> object into hour, minute, second …\nDecompose a TIME_TZ objects into micros and a timezone …\nDecompose a <code>duckdb_timestamp</code> object into a …\nGets the bind data set by <code>duckdb_bind_set_bind_data</code> during …\nRetrieves the extra info of the function as set in …\nGets the init data set by <code>duckdb_init_set_init_data</code> during …\nGets the thread-local init data set by …\n! Additional function info. When setting this info, it is …\nReport that an error has occurred while executing the …\nObtains a human-readable name and description of a …\nObtains an int64 of the given value.\nRetrieves the enum type class of a <code>duckdb_logical_type</code>.\nObtains a string representation of the given value. The …\n! Hugeints are composed of a (lower, upper) component ! …\nConverts a duckdb_hugeint object (as obtained from a …\nGets the bind data set by <code>duckdb_bind_set_bind_data</code> during …\nReturns the number of projected columns.\nReturns the column index of the projected column at the …\nRetrieves the extra info of the function as set in …\n! Additional function init info. When setting this info, …\nReport that an error has occurred while calling init.\nSets the user-provided init data in the init object. This …\nSets how many threads can process this table function in …\nInterrupt running query\nTest a <code>duckdb_date</code> to see if it is a finite value.\nTest a <code>duckdb_timestamp</code> to see if it is a finite value.\nReturns the version of the linked DuckDB, with a version …\n! The internal representation of a list metadata entry …\nRetrieves the child type of the given list type.\nRetrieves the child vector of a list vector.\nReturns the size of the child vector of the list.\nSets the total capacity of the underlying child-vector of …\nSets the total size of the underlying child-vector of a …\n! Holds an internal logical type. ! Must be destroyed with …\nReturns the alias of a duckdb_logical_type, if one is set, …\nAllocate <code>size</code> bytes of memory using the duckdb internal …\nRetrieves the key type of the given map type.\nRetrieves the value type of the given map type.\nReturns the number of parameters that can be provided to …\nDEPRECATED**: Prefer using <code>duckdb_result_get_chunk</code> instead.\nCreates a new database or opens an existing database file …\nExtended version of duckdb_open. Creates a new database or …\nReturns the parameter type for the parameter at the given …\nReturns the name used to identify the parameter The …\nReturns the error message contained within the pending …\nIf this returns DUCKDB_PENDING_RESULT_READY, the …\nExecutes a single task within the query, returning whether …\nReturns whether a duckdb_pending_state is finished …\nExecutes the prepared statement with the given bound …\nExecutes the prepared statement with the given bound …\n! The pending result represents an intermediate structure …\n! An enum over the pending state of a pending query result.\nCreate a prepared statement object from a query.\nReturns the error message associated with the given …\nPrepare an extracted statement. Note that after calling …\nFetch the internal arrow schema from the prepared …\n! A prepared statement is a parameterized query that …\nReturns the statement type of the statement to be executed\nExecutes a SQL query within a connection and stores the …\nExecutes a SQL query within a connection and stores the …\nFetch an internal arrow struct array from the arrow …\nReturns the error message contained within the result. The …\nFetch the internal arrow schema from the arrow result. …\nGet progress of the running query\n! A type holding information about the query execution …\nRegister the table function object within the given …\n! A replacement scan function that can be added to a …\nAdds a parameter to the replacement scan function.\n! Additional replacement scan info. When setting this …\nReport that an error has occurred while executing the …\nSets the replacement function name. If this function is …\n! A query result consists of a pointer to its internal …\nConvert a data chunk into an arrow struct array. Remember …\nReturns the number of data chunks present in the result.\nReturns the error message contained within the result. The …\nFetches a data chunk from the duckdb_result. This function …\nChecks if the type of the internal result is …\nReturns the return_type of the given result, or …\nReturns the statement type of the statement that was …\n! An enum over DuckDB’s different result types.\nReturns the number of rows present in the result object.\nReturns the number of rows changed by the query stored in …\nSets the specified option for the specified configuration. …\n! An enum over the returned state of different functions.\n! An enum over DuckDB’s different statement types.\nFetches a data chunk from the (streaming) duckdb_result. …\n! Strings are composed of a char pointer and a size. You …\nWhether or not the duckdb_string_t value is inlined. This …\n! The internal representation of a VARCHAR (string_t). If …\nReturns the number of children of a struct type.\nRetrieves the name of the struct child.\nRetrieves the child type of the given struct type at the …\nRetrieves the child vector of a struct vector.\n! A table function. Must be destroyed with …\nAdds a named parameter to the table function.\nAdds a parameter to the table function.\n! The bind function of the table function.\n! The (possibly thread-local) init function of the table …\nSets the bind function of the table function.\nAssigns extra information to the table function that can …\nSets the main function of the table function.\nSets the init function of the table function.\nSets the thread-local init function of the table function.\nSets the name of the given table function.\nSets whether or not the given table function supports …\n! The main function of the table function.\n! Used for threading, contains a task state. Must be …\nCheck if the provided duckdb_task_state has finished …\n! Time is stored as microseconds since 00:00:00 ! Use the …\n! TIME_TZ is stored as 40 bits for int64_t micros, and 24 …\n! Timestamps are stored as microseconds since 1970-01-01 ! …\nRe-compose a <code>duckdb_date</code> from year, month and date (…\nRe-compose a <code>duckdb_time</code> from hour, minute, second and …\nRe-compose a <code>duckdb_timestamp</code> from a …\n! An enum over DuckDB’s internal types. ! An enum over …\nConverts a duckdb_uhugeint object (as obtained from a …\nReturns the number of members that the union type has.\nRetrieves the name of the union member.\nRetrieves the child type of the given union member at the …\nReturns whether or not a row is valid (i.e. not NULL) in …\nIn a validity mask, sets a specific row to invalid.\nIn a validity mask, sets a specific row to valid.\nIn a validity mask, sets a specific row to either valid or …\n! Holds a DuckDB value, which wraps a type. ! Must be …\nreturns: The duckdb_blob value at the specified location. …\nreturns: The boolean value at the specified location, or …\nreturns: The duckdb_date value at the specified location, …\nreturns: The duckdb_decimal value at the specified …\nreturns: The double value at the specified location, or 0 …\nreturns: The float value at the specified location, or 0 …\nreturns: The duckdb_hugeint value at the specified …\nreturns: The int16_t value at the specified location, or 0 …\nreturns: The int32_t value at the specified location, or 0 …\nreturns: The int64_t value at the specified location, or 0 …\nreturns: The int8_t value at the specified location, or 0 …\nreturns: The duckdb_interval value at the specified …\nreturns: Returns true if the value at the specified index …\nreturns: The string value at the specified location. The …\nDEPRECATED: use duckdb_value_string_internal instead. This …\nreturns: The duckdb_time value at the specified location, …\nreturns: The duckdb_timestamp value at the specified …\nreturns: The duckdb_uhugeint value at the specified …\nreturns: The uint16_t value at the specified location, or …\nreturns: The uint32_t value at the specified location, or …\nreturns: The uint64_t value at the specified location, or …\nreturns: The uint8_t value at the specified location, or 0 …\nDEPRECATED: use duckdb_value_string instead. This function …\nDEPRECATED: use duckdb_value_string_internal instead. This …\n! A vector to a specified column in a data chunk. Lives as …\nAssigns a string element in the vector at the specified …\nAssigns a string element in the vector at the specified …\nEnsures the validity mask is writable by allocating it.\nRetrieves the column type of the specified vector.\nRetrieves the data pointer of the vector.\nRetrieves the validity mask pointer of the specified …\nThe internal vector size used by DuckDB. This is the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n! DuckDB’s index type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")