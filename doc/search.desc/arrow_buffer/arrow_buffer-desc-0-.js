searchState.loadedDescShard("arrow_buffer", 0, "Low-level buffer abstractions for Apache Arrow Rust\nTrait expressing a Rust type that has the same in-memory …\nThe maximum value that can be represented by this integer …\nThe minimum value that can be represented by this integer …\nThe multiplicative inverse for this integer type, i.e. <code>-1</code>.\nThe multiplicative identity for this integer type, i.e. <code>1</code>.\nAllows conversion from supported Arrow types to a byte …\nThe additive identity for this integer type, i.e. <code>0</code>.\nDefines the low-level <code>Allocation</code> API for shared memory …\nWraps this <code>i256</code> into an <code>i128</code>\nConvert to usize according to the <code>as</code> operator\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nTypes of shared memory region\nBuffer builders\nComputes the absolute value of this i256 returning <code>None</code> if …\nPerforms checked addition\nPerforms checked division\nPerforms checked multiplication\nNegates this i256 returning <code>None</code> if <code>Self == Self::MIN</code>\nPerforms checked exponentiation\nPerforms checked remainder\nPerforms checked subtraction\nReturns the argument unchanged.\nCreate an integer value from its representation as a byte …\nCreate an optional i256 from the provided <code>f64</code>. Returning …\nConvert native type from i128.\nConvert native type from i128.\nConvert native type from i32.\nConvert native type from i32.\nConvert native type from i64.\nConvert native type from i64.\nCreate an integer value from its representation as a byte …\nCreate an i256 from the provided low u128 and high i128\nCreate an integer value from its representation as string.\nConvert native integer type from usize\nA signed 256-bit integer\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>i256</code> is negative\nReturns <code>true</code> if this <code>i256</code> is positive\nReturns a number <code>i256</code> representing sign of this <code>i256</code>.\nReturn the memory representation of this integer as a byte …\nConverts this instance into a byte slice\nConverts this <code>i256</code> into an <code>i128</code> returning <code>None</code> if this …\nConvert native type to isize.\nReturn the memory representation of this integer as a byte …\nReturns this <code>i256</code> as a low u128 and high i128\nConvert native type to usize.\nConvert from usize according to the <code>as</code> operator\nComputes the absolute value of this i256\nPerforms wrapping addition\nPerforms wrapping division\nPerforms wrapping multiplication\nNegates this i256\nPerforms wrapping exponentiation\nPerforms wrapping remainder\nPerforms wrapping subtraction\nCache and allocation multiple alignment size\nThe owner of an allocation. The trait implementation is …\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nReturns the number of chunks\nCounts the number of ones\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over chunks of 64 bits represented as …\nReturns an iterator over chunks of 64 bits, with the …\nCreate a from a byte array, and and an offset and length …\nReturns the bitmask of remaining bits\nReturns the number of remaining bits, guaranteed to be …\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BitIterator</code> from the provided <code>buffer</code>, and …\nCreate a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …\nCreate a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …\nCalls the provided closure for each index in the provided …\nSets all bits on <code>write_data</code> in the range …\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA slice-able <code>Buffer</code> containing bit-packed booleans\nBuffer represents a contiguous memory region that can be …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nReturns a mutable raw pointer to this buffer’s internal …\nReturns a pointer to the start of this buffer.\nReturns a raw pointer to this buffer’s internal memory …\nReturns the byte slice stored in this buffer\nReturns the data stored in this buffer as a slice.\nReturns the data stored in this buffer as a mutable slice.\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a slice of this buffer starting at a certain bit …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nReturns the underlying <code>Buffer</code>\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nReturns the capacity of this buffer. For externally owned …\nReturns the total capacity in this buffer. The invariant …\nClear all existing data from this buffer.\nInvokes <code>f</code> with values <code>0..len</code> collecting the boolean …\nInvokes <code>f</code> with indexes <code>0..len</code> collecting the boolean …\nReturns true if all nulls in <code>other</code> also exist in self\nReturns the number of 1-bits in this buffer.\nReturns the number of set bits in this buffer\nReturns the number of 1-bits in this buffer, starting from …\nReturns a new <code>NullBuffer</code> where each bit in the current …\nExtends this buffer from a slice of items that can be …\nExtends the buffer by <code>additional</code> bytes equal to <code>0u8</code>, …\nFreezes this buffer and return an immutable version of it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAuxiliary method to create a new Buffer\nCreates a buffer from an existing memory region. Ownership …\nAllocates a new MutableBuffer with <code>len</code> and capacity to be …\nCreate a new <code>OffsetBuffer</code> from the iterator of slice …\nCreates a buffer from an existing aligned memory region …\nInitializes a Buffer from a slice of items.\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nCreates a <code>MutableBuffer</code> from a boolean <code>Iterator</code> with a …\nCreate a <code>Buffer</code> from the provided <code>Vec</code> without copying\nCreate a <code>MutableBuffer</code> from the provided <code>Vec</code> without …\nReturns the physical index at which the logical array ends\nPerforms a binary search to find the physical index for …\nReturns the physical index at which the logical array …\nReturns the inner <code>ScalarBuffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns <code>MutableBuffer</code> for mutating the buffer if this …\nReturns <code>Vec</code> for mutating the buffer\nReturns whether the buffer is empty.\nReturns whether this buffer is empty or not.\nReturns true if this <code>BooleanBuffer</code> is empty\nReturns true if this <code>NullBuffer</code> is empty\nReturns true if this buffer is empty\nReturns <code>true</code> if the value at <code>idx</code> is null\nReturns <code>true</code> if the bit at index <code>i</code> is set\nReturns <code>true</code> if the value at <code>idx</code> is not null\nReturns an iterator over the bits in this <code>BooleanBuffer</code>\nReturns an iterator over the bits in this <code>NullBuffer</code>\nReturns the number of bytes in the buffer\nReturns the length (the number of bytes written) in this …\nReturns the length of this <code>BooleanBuffer</code> in bits\nReturns the length of this <code>NullBuffer</code>\nReturns the logical length of the run-ends stored by this …\nReturns the maximum run-end encoded in the underlying …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nAllocate a new MutableBuffer with initial capacity to be …\nCreate a new <code>ScalarBuffer</code> from a <code>Buffer</code>, and an <code>offset</code> and …\nCreate a new <code>BooleanBuffer</code> from a <code>Buffer</code>, an <code>offset</code> and …\nCreate a new <code>NullBuffer</code> computing the null count\nCreate a new <code>RunEndBuffer</code> from a <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>OffsetBuffer</code> containing a single 0 value\ncreates a new MutableBuffer with capacity and length …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nCreate a new <code>NullBuffer</code> with the provided <code>buffer</code> and …\nCreate a new <code>RunEndBuffer</code> from an <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>OffsetBuffer</code> containing <code>len + 1</code> <code>0</code> values\nReturns the null count for this <code>NullBuffer</code>\nReturns the offset of this <code>BooleanBuffer</code> in bits\nReturns the offset of this <code>NullBuffer</code> in bits\nReturns the logical offset into the run-ends stored by …\nReturns true if this <code>OffsetBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>Buffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>ScalarBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>BooleanBuffer</code> is equal to <code>other</code>, …\nExtends the buffer with a new item, increasing its …\nExtends the buffer with a new item, without checking for …\nEnsures that this buffer has at least <code>self.len + additional</code>…\nResizes the buffer, either truncating its contents (with …\nReturns an iterator over the set bit positions in this …\nSafety\nEnsure that <code>count</code> bytes from <code>start</code> contain zero bits\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nShrinks the capacity of the buffer as much as possible. …\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nReturns a new Buffer that is a slice of this buffer …\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nSlices this <code>BooleanBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>NullBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>RunEndBuffer</code> by the provided <code>offset</code> and <code>length</code>\nReturns a new Buffer that is a slice of this buffer …\nReturns a <code>Buffer</code> containing the sliced contents of this …\nTruncates this buffer to <code>len</code> bytes\nCalls the provided closure for each index in this null …\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nView buffer as a slice of a specific type.\nView buffer as a immutable slice of a specific type.\nView this buffer as a mutable slice of a specific type.\nComputes the union of the nulls in two optional <code>NullBuffer</code>\nReturns a <code>BitIndexIterator</code> over the valid indices in this …\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nReturns the packed validity of this <code>NullBuffer</code> not …\nReturns the boolean value at index <code>i</code>.\nReturns the boolean value at index <code>i</code>.\nReturns the packed values of this <code>BooleanBuffer</code> not …\nReturns the values of this <code>RunEndBuffer</code> not including any …\nSet the bits in the range of <code>[0, end)</code> to 0 (if <code>val</code> is …\nAllocate a new MutableBuffer with initial capacity to be …\nBuilder for <code>BooleanBuffer</code>\nBuilder for creating a Buffer object.\nBuilder for creating the null bit buffer. This builder …\nAdvances the buffer by <code>additional</code> bits\nIncreases the number of elements in the internal buffer by …\nAppends a boolean <code>v</code> into the buffer\nAppends a boolean value into the builder.\nAppends a value of type <code>T</code> into the builder, growing the …\nAppend <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppends a value of type <code>T</code> into the builder N times, …\nAppends <code>n</code> <code>true</code>s into the builder to indicate that these <code>n</code> …\nAppends <code>n</code> <code>false</code>s into the builder to indicate that these <code>n</code> …\nAppends <code>n</code>, zero-initialized values\nAppends a <code>true</code> into the builder to indicate that this item …\nAppends a <code>false</code> into the builder to indicate that this …\nAppend <code>range</code> bits from <code>to_set</code>\nAppends a slice of booleans into the buffer\nAppends a boolean slice into the builder to indicate the …\nAppends a slice of type <code>T</code>, growing the internal buffer as …\nSafety\nReturns the packed bits\nReturns the inner bitmap builder as slice\nView the contents of this buffer as a slice\nReturns the packed bits\nView the contents of this buffer as a mutable slice\nReturns the capacity of the buffer\nReturns the actual capacity (number of elements) of the …\nCreates a <code>BooleanBuffer</code>\nBuilds the null buffer and resets the builder. Returns <code>None</code>…\nResets this builder and returns an immutable Buffer.\nBuilds the BooleanBuffer without resetting the builder.\nBuilds the NullBuffer without resetting the builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a bit in the buffer at <code>index</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if empty\nReturns whether the internal buffer is empty.\nReturns the length of the buffer\nReturns the current number of array elements in the …\nCreates a new <code>BooleanBufferBuilder</code>\nCreates a new empty builder. <code>capacity</code> is the number of …\nCreates a new builder with initial capacity for <em>at least</em> …\nCreates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …\nCreates a new builder from a <code>MutableBuffer</code>.\nCreates a new builder from a <code>MutableBuffer</code>\nCreates a new builder with given length.\nReserve space to at least <code>additional</code> new bits. Capacity …\nReserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.\nResizes the buffer, either truncating its contents (with …\nSets a bit in the buffer at <code>index</code>\nTruncates the builder to the given length\nShorten this BufferBuilder to <code>len</code> items")