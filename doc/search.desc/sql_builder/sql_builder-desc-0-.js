searchState.loadedDescShard("sql_builder", 0, "Simple SQL code generator.\nMain SQL builder\nSELECT from additional table. Adds table name to comma …\nAdd WHERE condition.\nAdd WHERE field BETWEEN values.\nAdd WHERE condition for equal parts.\nAdd WHERE condition for field not less than value.\nAdd WHERE condition for field greater than value.\nAdd WHERE field IN (list).\nAdd WHERE field IN (query).\nAdd WHERE field IN (string list).\nAdd WHERE IS NOT NULL condition.\nAdd WHERE IS NULL condition.\nAdd WHERE condition for field not greater than value.\nAdd WHERE LIKE condition.\nAdd WHERE LIKE %condition%.\nAdd WHERE LIKE condition%.\nAdd WHERE LIKE %condition.\nAdd WHERE condition for field less than value.\nAdd WHERE condition for non-equal parts.\nAdd WHERE field NOT BETWEEN values.\nAdd WHERE field NOT IN (list).\nAdd WHERE field NOT IN (query).\nAdd WHERE field NOT IN (string list).\nAdd WHERE NOT LIKE condition.\nAdd WHERE NOT LIKE %condition%.\nAdd WHERE NOT LIKE condition%.\nAdd WHERE NOT LIKE %condition.\nMake backquoted name of identifier.\nBackquote string for SQL.\nMake brackets quoted name of identifier.\nQuote string with [brackets].\nAdd COUNT(field).\nAdd COUNT(field) AS name.\nUse CROSS JOIN\nCreate DELETE query.\nSet DISTINCT for fields.\nMake double quoted name of identifier.\nDouble quote string for SQL.\nEscape string for SQL.\nAdd field.\nAdd fields.\nReturns the argument unchanged.\nAdd GROUP BY part.\nAdd HAVING condition.\nUse INNER JOIN\nCreate INSERT query.\nCalls <code>U::from(self)</code>.\nJoin with table.\nUse LEFT JOIN\nUse LEFT OUTER JOIN\nSet LIMIT.\nMake safe name of identifier if it contains unsafe …\nUse NATURAL JOIN\nSet OFFSET.\nJoin constraint to the last JOIN part.\nJoin constraint to the last JOIN part.\nAdd OR condition to the last WHERE condition.\nAdd OR field BETWEEN values to the last WHERE condition.\nAdd OR condition of equal parts to the last WHERE …\nAdd OR condition for field not less than value to the last …\nAdd OR condition for field greater than value to the last …\nAdd OR field IN (list) to the last WHERE condition.\nAdd OR field IN (query) to the last WHERE condition.\nAdd OR field IN (string list) to the last WHERE condition.\nAdd OR IS NOT NULL condition to the last WHERE condition.\nAdd OR IS NULL condition to the last WHERE condition.\nAdd OR condition for field not greater than value to the …\nAdd OR LIKE condition to the last WHERE condition.\nAdd OR LIKE condition to the last WHERE %condition%.\nAdd OR LIKE condition to the last WHERE condition%.\nAdd OR LIKE condition to the last WHERE %condition.\nAdd OR condition for field less than value to the last …\nAdd OR condition of non-equal parts to the last WHERE …\nAdd OR field NOT BETWEEN values to the last WHERE …\nAdd OR field NOT IN (list) to the last WHERE condition.\nAdd OR field NOT IN (query) to the last WHERE condition.\nAdd OR field NOT IN (string list) to the last WHERE …\nAdd OR NOT LIKE condition to the last WHERE condition.\nAdd OR NOT LIKE condition to the last WHERE %condition%.\nAdd OR NOT LIKE condition to the last WHERE condition%.\nAdd OR NOT LIKE condition to the last WHERE %condition.\nAdd ORDER BY ASC.\nAdd ORDER BY.\nAdd ORDER BY DESC.\nMake quoted name of identifier.\nSQL command generator for query or subquery.\nSQL command generator for query or subquery without a …\nQuote string for SQL.\nAdd RETURNING part.\nAdd RETURNING id.\nUse RIGHT JOIN\nUse RIGHT OUTER JOIN\nAdd SELECT part (for INSERT).\nCreate SELECT query. You may specify comma separted list …\nCreate SELECT query without a table.\nAdd SET part (for UPDATE).\nReplace fields with choosed one.\nReplace fields.\nAdd SET part with escaped string value (for UPDATE).\nBuild complete SQL command.\nBuild subquery SQL command.\nBuild named subquery SQL command.\nUnion query with subquery. ORDER BY must be in the last …\nUnion query with all subquery. ORDER BY must be in the …\nCreate UPDATE query.\nAdd VALUES part (for INSERT).\nReplace first ? with a value.\nReplace all :name: with a value.\nReplace each :name: from map. Escape the : symbol with …\nReplace all $N with a value.\nReplace $1, $2, … with elements of array. Escape the $ …\nCyclic bindings of values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate safe name of identifier\nAdd additional part of identifier\nSet an alias for identifier\nMake backquoted identifier\nMake bracket-quoted identifier\nMake double quoted identifier\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of identifier\nMake quoted identifier\nMake safe identifier")