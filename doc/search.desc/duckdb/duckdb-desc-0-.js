searchState.loadedDescShard("duckdb", 0, "duckdb-rs is an ergonomic wrapper for using DuckDB from …\nduckdb access mode, default is Automatic\nAn iterator over the mapped resulting rows of a query, …\nLibrary used incorrectly\nAppend Error\nAppender for fast import data\nTrait used for sets of parameter passed into SQL …\nAdapter type which allows any iterator over <code>ToSql</code> values …\nAn handle for the resulting RecordBatch of a query.\nError when datatype to duckdb type\nThe order type, ASC\nA database that has been attached via “ATTACH DATABASE …\nAuthorization denied\nAccess mode of the database AUTOMATIC\nCacheable statement.\nUnable to open the database file\nInformation about a column of a DuckDB query.\nCommit the changes.\nduckdb configuration Refer to …\nA connection to a DuckDB database.\nAbort due to constraint violation\nThe database file is locked\nThe database disk image is malformed\nA table in the database is locked\nName for a database within a DuckDB connection.\nduckdb default null order, default is nulls first\nduckdb default order, default is Asc\nDEFERRED means that the transaction does not actually …\nThe order type, DESC\nInsertion failed because database is full\nOptions for how a Transaction or Savepoint should behave …\nAn error from an underlying DuckDB call.\nContains the error value\nEnum listing possible errors from duckdb.\nError Codes\nEXCLUSIVE prevents other database connections from reading …\nError returned when an <code>execute</code> call returns rows.\nDatabase lock protocol error\nError when the value of a particular column is requested, …\nDo not commit or roll back changes - this will leave the …\nIMMEDIATE cause the database connection to start a new …\nError when DuckDB gives us an integral value outside the …\nInternal logic error in SQLite\nError when the value of a particular column is requested, …\nError when the value of a named column is requested, but …\nError when the value of a particular column is requested, …\nError when the number of bound parameters does not match …\nError when using SQL named parameters and passing a …\nError converting a file path to a string.\nError when the SQL is not a <code>SELECT</code>, is not read-only.\nShorthand for <code>DatabaseName::Main</code>.\nThe main database.\n<code>F</code> is used to transform the <em>streaming</em> iterator into a …\nAn iterator over the mapped resulting rows of a query.\nError when the SQL contains multiple statements.\nUses OS features not supported on host\nFile opened that is not a database file\nUnknown opcode in sqlite3_file_control()\nError converting a string to a C-compatible string because …\nNull ordering, NullsFirst\nNull ordering, NullsLast\nContains the success value\nCallback routine requested an abort\nOperation terminated by sqlite3_interrupt()\nSee the method documentation.\nA malloc() failed\nPanic. Used to enforce intentional behavior during …\n2nd parameter to sqlite3_bind out of range\nTrait used for sets of parameter passed into SQL …\nAdapter type which allows any iterator over <code>ToSql</code> values …\nAccess permission denied\nError when a query that was expected to return at least …\nAttempt to write a readonly database\nAccess mode of the database READ_ONLY\nAccess mode of the database READ_WRITE\nA typedef of the result returned by many methods.\nRoll back the changes. This is the default.\nA single result row of a query.\nA trait implemented by types that can index into columns …\nAn handle for the resulting rows of a query.\nRepresents a savepoint on a database connection.\nThe database schema changed\nA prepared statement.\nError when a query that was expected to insert one row did …\nSome kind of disk I/O error occurred\nShorthand for <code>DatabaseName::Temp</code>.\nThe temporary database (e.g., any “CREATE TEMPORARY TABLE…\nError available for the implementors of the <code>ToSql</code> trait.\nString or BLOB exceeds size limit\nRepresents a transaction on a database connection.\nOptions for transaction behavior. See BEGIN TRANSACTION …\nData type mismatch\nSQL error or missing database\nError converting a string to UTF-8.\nAccess mode of the database ([AUTOMATIC], READ_ONLY or …\nAllow to load third-party duckdb extensions.\nMap over this <code>Rows</code> with a fallible function, converting it …\nAppend one row\nAppend multiple rows from Iterator\nCreate an Appender for fast import data default to use …\nConstructor function for a [<code>ParamsFromIter</code>]. See its …\nCreate an Appender for fast import data\nGive access to the underlying statement\nClose the DuckDB connection.\nReturn the number of columns in the result set returned by …\nReturns the column index in the result set for a given …\nReturns the name assigned to a particular column in the …\nGet all the column names in the result set of the prepared …\ncolumn_type\nA convenience method which consumes and commits a …\nA convenience method which consumes and commits a …\nReturns the type of the column (<code>None</code> for expression).\nNull ordering used when none is specified ([NULLS_FIRST] …\nThe order type used when none is specified ([ASC] or DESC)\nDiscard the statement, preventing it from being returned …\nGet the current setting for what happens to the savepoint …\nGet the current setting for what happens to the …\nenable autoload extensions\nAllow the database to access external state (through e.g. …\nWhether or not object cache is used to cache e.g. Parquet …\nExecute the prepared statement.\nConvenience method to prepare and execute a single SQL …\nConvenience method to run multiple SQL statements (that …\nReturn <code>true</code> if a query in the SQL statement it executes …\nConsumes the savepoint, committing or rolling back …\nConsumes the transaction, committing or rolling back …\nFlush data into DB\nRemove/finalize all prepared statements currently in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of a particular column of the result row.\nGet the value of a particular column of the result row as …\nGet the value of a particular column of the result row as …\nreturn arrow schema\nGet the value of a particular column of the result row.\nReturns the index of the appropriate column, or <code>None</code> if no …\nExecute an INSERT.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nTest for auto-commit mode. Autocommit mode is on by …\nMap over this <code>Rows</code>, converting it to a <code>Map</code>, which …\nMap over this <code>Rows</code>, converting it to a <code>MappedRows</code>, which …\nThe maximum memory of the system (e.g. 1GB)\nReturns the name of the column.\nBegin a new savepoint. Can be nested.\nBegin a new transaction. Cannot be nested; see <code>savepoint</code> …\nAttempt to get the next row from the query. Returns …\nOpen a new connection to a DuckDB database.\nOpen a new connection to an ffi database.\nOpen a new connection to an in-memory DuckDB database.\nOpen a new connection to an in-memory DuckDB database.\nOpen a new connection to a DuckDB database.\nConverts a <code>Result&lt;T&gt;</code> into a <code>Result&lt;Option&lt;T&gt;&gt;</code>.\nReturn the number of parameters that can be bound to this …\nA macro making it more convenient to pass heterogeneous or …\nConstructor function for a <code>ParamsFromIter</code>. See its …\nReturns the path to the database file, if one exists and …\nQuery the current value(s) of <code>pragma_name</code> associated to …\nQuery the current rows/values of <code>pragma_name</code>.\nQuery the current value of <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code> and return the updated …\nPrepare a SQL statement for execution.\nPrepare a SQL statement for execution, returning a …\nExecute the prepared statement, returning a handle to the …\nExecutes the prepared statement and maps a function over …\nExecute the prepared statement, returning a handle to the …\nExecutes the prepared statement and maps a function over …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query that is expected to …\nLow level API to directly bind a parameter to a given …\nLow level API to execute a statement given that all …\nLow level API to get <code>Rows</code> for this query given that all …\nA convenience method which rolls back a savepoint.\nA convenience method which consumes and rolls back a …\nReturn the row count\nBegin a nested savepoint.\nBegin a new savepoint with the default behavior (DEFERRED).\nStarts a new savepoint, allowing nested transactions.\nBegin a nested savepoint with a user-provided savepoint …\nBegin a new savepoint with a specified name.\nCreate a new savepoint with a custom savepoint name. See …\nConfigure the savepoint to perform the specified action …\nConfigure the transaction to perform the specified action …\nSet the maximum number of cached prepared statements this …\nGet next batch records in arrow-rs\nThe number of total threads used by the system\nBegin a new transaction with the default behavior …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nCreates a new connection to the already-opened database.\nTraits dealing with DuckDB data types.\nBegin a new transaction with the default behavior …\nReturns the version of the DuckDB library\nAdd any setting to the config. DuckDB will return an error …\nBegin a new savepoint with a user-provided savepoint name.\nAny\nThe value is a signed big integer.\nThe value is a signed big integer.\nBIGINT\nThe value is a blob of data\nThe value is a blob of data\nBLOB\nThe value is a boolean.\nThe value is a boolean.\nBOOLEAN\nA borrowed SQLite-representable value.\nThe value is a date32\nThe value is a date32\nDATE32\nThe value is a Decimal.\nThe value is a decimal\nDECIMAL\nThe value is a f64.\nThe value is a f64.\nDOUBLE\nThe value is an enum\nThe value is an enum\nENUM\nWrapper type for different enum sizes\nContains the error value\nThe value is a f32.\nThe value is a f32.\nFLOAT\nA trait for types that can be created from a DuckDB value.\nEnum listing possible errors from <code>FromSql</code> trait.\nResult type for implementors of the <code>FromSql</code> trait.\nThe value is a signed huge integer.\nThe value is a signed huge integer.\nHUGEINT\nThe value is a signed integer.\nThe value is a signed integer.\nINT\nThe value is an interval (month, day, nano)\nThe value is an interval (month, day, nano)\nINTERVAL\nError when an DuckDB value is requested, but the type of …\nThe value is a list\nThe value is a list\nLIST\nTime in microseconds.\nTime in milliseconds.\nTime in nanoseconds.\nEmpty struct that can be used to fill in a query parameter …\nThe value is a <code>NULL</code> value.\nThe value is a <code>NULL</code> value.\nNULL\nContains the success value\nAn error case available for implementors of the <code>FromSql</code> …\nError when the value returned by DuckDB cannot be stored …\nAn owned SQLite-representable value.\nTime in seconds.\nThe value is a signed small integer.\nThe value is a signed small integer.\nSMALLINT\nThe value is a text string.\nThe value is a text string.\nText\nThe value is a time64\nThe value is a time64\nTIME64\nAn absolute length of time in seconds, milliseconds, …\nThe value is a timestamp.\nThe value is a timestamp.\nTIMESTAMP\nThe value is a signed tiny integer.\nThe value is a signed tiny integer.\nTINYINT\nA trait for types that can be converted into DuckDB …\n<code>ToSqlOutput</code> represents the possible output types for …\nDuckDB data types. See Fundamental Datatypes.\nThe value is a unsigned big integer.\nThe value is a unsigned big integer.\nUBIGINT\nThe value is a unsigned integer.\nThe value is a unsigned integer.\nUINT\nThe underlying enum type is u16\nThe underlying enum type is u32\nThe underlying enum type is u8\nThe value is a unsigned small integer.\nThe value is a unsigned small integer.\nUSMALLINT\nThe value is a unsigned tiny integer.\nThe value is a unsigned tiny integer.\nUTINYINT\nOwning dynamic type value. Value’s type is typically …\nA non-owning static type value. Typically the memory …\nIf <code>self</code> is case <code>Blob</code>, returns the byte slice. Otherwise, …\nIf <code>self</code> is case <code>Text</code>, returns the string value. Otherwise, …\nConverts DuckDB value into Rust value.\nReturns DuckDB fundamental datatype.\nReturns DuckDB fundamental datatype.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned version of this ValueRef\nConverts Rust value to DuckDB value\ndays\nmonths\nnanos\ndays\nmonths\nnanos")