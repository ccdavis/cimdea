searchState.loadedDescShard("arrow_cast", 0, "Cast kernel for Apache Arrow\nFunctions for Base64 encoding/decoding\nDefines cast kernels for <code>ArrayRef</code>, to convert <code>Array</code>s …\nFunctions for printing array values, as strings, for …\nUtilities for pretty printing record batches. Note this …\nA GeneralPurpose engine using the alphabet::STANDARD …\nA GeneralPurpose engine using the alphabet::STANDARD …\nA GeneralPurpose engine using the alphabet::URL_SAFE …\nA GeneralPurpose engine using the alphabet::URL_SAFE …\nThe config type used by this engine\nThe decode estimate used by this engine\nAn <code>Engine</code> provides low-level encoding and decoding …\nBase64 decode each element of <code>array</code> with the provided …\nBas64 encode each element of <code>array</code> with the provided <code>engine</code>\nReturns the config for this engine.\nDecode the input into a new <code>Vec</code>.\nDecode the input into the provided output slice.\nDecode the input into the provided output slice.\nDecode the <code>input</code> into the supplied <code>buffer</code>.\nEncode arbitrary octets as base64 using the provided <code>Engine</code>…\nEncode arbitrary octets as base64 into a supplied slice. …\nEncode arbitrary octets as base64 into a supplied <code>String</code>. …\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nCast <code>array</code> to the provided data type and return a new …\nFormatting options when casting from temporal types to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nhow to handle cast failures, either return NULL …\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts numeric type to a <code>String</code>\nReturns an <code>ArrayFormatter</code> that can be used to format <code>array</code>\nFallibly converts this to a string\nReturns a <code>ValueFormatter</code> that implements <code>Display</code> for the …\nOverrides the format used for <code>DataType::Date32</code> columns\nOverrides the format used for <code>DataType::Date64</code> columns\nIf set to <code>true</code> any formatting errors will be written to …\nOverrides the format used for duration columns\nOverrides the string used to represent a null\nOverrides the format used for <code>DataType::Time32</code> and …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nWrites this value to the provided <code>Write</code>\nSpecialized parsing implementations used by csv and json …\nParse the string format decimal value to i128/i256 format …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCreate a visual representation of record batches\nCreate a visual representation of record batches\nCreate a visual representation of columns\nPrints a visual representation of record batches to stdout\nPrints a visual representation of a list of column to …")