var searchIndex = new Map(JSON.parse('[\
["cimdea",{"doc":"","t":"CCCCCCCFFFFFNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNOOONNNNOOOONNNNNNNNNNNNNNNNNNNNOOHFFFFNNNNNNNNNNONNNNNNNNONNNNONNNNNNNNOOONNONNNNNNNNNNNNNNNNOOOPPPPPPPFGFIGFIPPPPPPGPNNNNNNNNNNNNONNNNNNNNNNNNOONNNNNNNONNNNNNNNNOONNNNNNNOOOOOONOONNNNNNNNNNNNNNNNNNNNNNNNOOOOOOFFFNNNNNNNNNNNNNNOONNNNNNNNNNNNONNNONNONNNNNNNNNNNNNOOPGFPPGGPPPPPPPPPNNNNNNNNNNNNNNOOHHNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOPPKPPPGPGPGFPMNNNNNNNNNNNNNNNNNOOMNMNNNNNNNNNMNNNNNOHMNMNOOMNNNNNNNNNNNNNNNNNO","n":["conventions","defaults","ipums_data_model","ipums_metadata_model","layout","query_gen","request","Context","DatasetsForVariable","MetadataEntities","MicroDataCollection","VariablesForDataset","add_dataset_variable","add_or_update","add_or_update","allow_full_metadata","available_datasets","available_variables","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_metadata","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cloned_dataset_from_id","cloned_dataset_from_name","cloned_variable_from_id","cloned_variable_from_name","create_dataset","create_variable","data_root","datasets_by_name","datasets_index","enable_full_metadata","fmt","fmt","fmt","fmt","fmt","for_dataset","for_variable","from","from","from","from","from","from_ipums_collection_name","into","into","into","into","into","load_full_metadata","load_full_metadata_for_datasets","load_full_metadata_for_selections","load_metadata_for_datasets","load_metadata_for_datasets_and_variables","load_metadata_for_selected_datasets_from_layouts","metadata","name","name","new","new","new","path_from_dataset_name","product_root","record_hierarchy","record_types","settings","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","variables_by_name","variables_index","defaults_for","RecordHierarchy","RecordHierarchyMember","RecordType","RecordWeight","add_child","add_member","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","divisor","fmt","fmt","fmt","fmt","foreign_keys","from","from","from","from","into","into","into","into","name","name","name","new","new","parent","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_id","value","weight","BottomCode","Fixed","Fixed","Float","Float","Integer","Integer","IpumsCategory","IpumsDataType","IpumsDataset","IpumsDatasetId","IpumsValue","IpumsVariable","IpumsVariableId","Missing","NotApplicable","NotInUniverse","String","String","TopCode","UniversalCategoryType","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","categories","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","description","eq","fmt","fmt","fmt","fmt","fmt","fmt","formatting","from","from","from","from","from","from","from","from","from","id","id","into","into","into","into","into","into","label","label","label","meaning","month","name","name","new","record_type","sample","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","year","base","point","utf8","value","DatasetLayout","LayoutVar","RecordLayout","add","all_variables","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","col","data_type","filtered","find_variables","fmt","for_rectype","from","from","from","from_layout_file","from_layout_vars","into","into","into","name","new","new_from_vars","record_types","rectype","select_only","sorted_vars_by_start","start","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vars","vars","width","Between","CompareOperation","Condition","Csv","DataFusion","DataPlatform","DataSource","Duckdb","Equal","Greater","GreaterEqual","In","Less","LessEqual","NativeTable","Parquet","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compare_to","comparison","cross_tab","cross_tab_subpopulation","fmt","fmt","fmt","for_platform","frequency","from","from","from","from","into","into","into","into","new","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","var","full_path","full_path","name","name","name","CSV","Csv","DataRequest","Extract","FW","Fw","InputType","Json","OutputFormat","Parquet","RequestType","SimpleRequest","Tabulation","aggregate_query","aggregate_query","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","conditions","datasets","deserialize_from_ipums_json","deserialize_from_ipums_json","extract_query","extract_query","fmt","fmt","fmt","fmt","from","from","from","from","from_names","from_names","into","into","into","into","output_format","perform_request","print_codebook","print_codebook","print_stata","print_stata","product","request_type","serialize_to_IPUMS_JSON","serialize_to_IPUMS_JSON","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variables"],"q":[[0,"cimdea"],[7,"cimdea::conventions"],[106,"cimdea::defaults"],[107,"cimdea::ipums_data_model"],[169,"cimdea::ipums_metadata_model"],[279,"cimdea::ipums_metadata_model::IpumsValue"],[283,"cimdea::layout"],[337,"cimdea::query_gen"],[402,"cimdea::query_gen::DataSource"],[407,"cimdea::request"],[485,"core::option"],[486,"core::fmt"],[487,"core::fmt"],[488,"alloc::string"],[489,"std::path"],[490,"alloc::vec"],[491,"std::path"],[492,"core::result"],[493,"core::any"]],"d":["This module provides structs and methods for loading …","The Household - Person record structure is the default for …","Every dataset in a collection will have these same …","The “metadata” models serve to assist working with …","Supports reading the “layout” files from IPUMS …","This is an exploratory module to try out ideas for …","Requests describe requested IPUMS data either as an …","This is the mutable state  created and passed around …","","","Key characteristics of collections like all USA Census …","There is a master Vec with Variables by IpumsVariableId …","","","","","","The valid cross-products","","","","","","","","","","","","","","","","","","","","","","","","","","","","Any output_data/current path with ./layouts and ./parquet …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Based on name, use default data root and product root and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load all variables and samples for the context and the …","Uses default product_root to find metadata database and …","Load everything available for the selected variables and …","When called, the context should be already set to read …","The context should be set to read from layouts or full …","Using the data_root, scan the layouts and load metadata …","","","A product name like USA, IPUMSI, CPS etc","","","","Formats the exact paths needed to get data for this …","","","","","","","","","","","","","","","","","","","","","","","","","","","There are default configurations for USA, IPUMSI and CPS …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The ‘id’ fields in the models are generated when …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An entry (a single line) from a layout file. There’s one …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Every data request should serialize, deserialize, and …","","","","","","","","","The <code>SimpleRequest</code> probably can describe 90% of IPUMS …","","An SQL query to summarize the described data.","","","","","","","","","","","","","","","","","","","","Convert from the Tractor / generic JSON representation.","","An SQL query if this is an extraction request","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Build request from a basic set of variable and dataset …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Print a human readable codebook","","Print a machine readable Stata codebook","","","","To the Tractor / generic IPUMS representation","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,5,8,10,1,1,9,1,5,8,10,9,1,5,8,10,9,9,1,5,8,10,9,1,5,8,10,1,1,1,1,1,1,10,1,1,10,9,1,5,8,10,5,8,9,1,5,8,10,10,9,1,5,8,10,9,9,9,10,10,9,9,9,10,1,5,8,10,10,9,9,10,9,1,5,8,10,9,1,5,8,10,9,1,5,8,10,9,1,5,8,10,1,1,0,0,0,0,0,25,26,27,28,25,26,27,28,25,26,25,27,28,25,26,27,28,25,26,28,27,28,25,26,27,27,28,25,26,27,28,25,26,27,28,25,28,26,25,27,28,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,27,27,32,30,31,30,31,30,31,0,0,0,0,0,0,0,32,32,32,30,31,32,0,32,2,3,30,31,32,33,2,3,30,31,32,33,3,2,3,30,31,32,33,2,3,30,31,32,33,3,3,31,2,3,30,31,32,33,3,2,2,3,3,30,30,31,32,33,2,3,2,3,30,31,32,33,33,2,3,33,2,2,3,33,3,2,2,3,30,31,32,33,2,3,30,31,32,33,2,3,30,31,32,33,2,3,30,31,32,33,33,2,46,46,47,47,0,0,0,36,37,35,36,37,35,36,37,35,36,37,35,36,37,35,35,36,37,35,37,35,36,37,37,37,35,36,37,35,36,36,37,35,37,36,35,35,36,37,35,36,37,35,36,37,35,36,37,36,36,35,39,0,0,38,41,0,0,41,39,39,39,39,39,39,38,38,41,38,39,40,41,38,39,40,38,39,40,38,39,40,40,40,0,0,38,39,40,38,0,41,38,39,40,41,38,39,40,38,40,38,39,40,41,38,39,40,41,38,39,40,41,38,39,40,40,48,49,48,50,49,45,21,0,44,45,21,0,45,0,21,0,0,44,42,43,44,45,21,43,44,45,21,43,44,45,21,43,44,45,21,43,43,43,42,43,42,43,44,45,21,43,44,45,21,43,42,43,44,45,21,43,43,0,42,43,42,43,43,43,42,43,44,45,21,43,44,45,21,43,44,45,21,43,44,45,21,43,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],4],[[5,6,7],4],[[8,6,7],4],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,4],[9,9],[1,1],[5,5],[8,8],[10,10],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,6],2],[[1,11],[[12,[2]]]],[[1,7],3],[[1,11],[[12,[3]]]],[[1,2],6],[[1,3],7],0,0,0,0,[[9,13],14],[[1,13],14],[[5,13],14],[[8,13],14],[[10,13],14],[[5,6],[[12,[[15,[7]]]]]],[[8,7],[[12,[[15,[6]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[11,[12,[16]],[12,[16]]],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,[12,[17]]],4],[[9,[18,[16]]],4],[[9,[18,[16]],[18,[16]],[12,[17]]],4],[[10,[18,[11]]],4],[[10,[19,[16]],[19,[16]]],4],[[9,[18,[11]],20],4],0,0,0,[[],1],[[],5],[[],8],[[10,11,21],[[22,[16,17]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0,0,[11,9],0,0,0,0,[[25,11],4],[[26,11,11],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[27,27],[28,28],[25,25],[26,26],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,[[27,13],14],[[28,13],14],[[25,13],14],[[26,13],14],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[11,29],28],[11,26],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,2],[3,3],[30,30],[31,31],[32,32],[33,33],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,[[31,31],34],[[2,13],14],[[3,13],14],[[30,13],14],[[31,13],14],[[32,13],14],[[33,13],14],0,[[[4,[16,29]]],2],[-1,-1,[]],[[[4,[35,29]]],3],[-1,-1,[]],[-1,-1,[]],[11,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,11],0,0,0,0,0,0,[[11,32,31],33],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0,0,0,0,0,0,0,0,0,[[36,35],4],[37,[[19,[35]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[36,36],[37,37],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,[[36,[18,[16]]],36],[[37,[18,[16]]],[[19,[35]]]],[[35,13],14],[[37,11],36],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,37],[[[19,[35]]],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[35,36],[[[19,[35]]],36],[37,[[19,[16]]]],0,[[37,[19,[16]]],[[23,[37,16]]]],[36,[[19,[35]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[36,[[19,[35]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,38],[39,39],[40,40],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,[[[18,[[4,[11,11]]]],[18,[[4,[11,11]]]],[18,[11]],[12,[16]],[12,[29]]],16],[[[18,[11]],[18,[11]],[12,[16]],[12,[29]],[18,[40]]],16],[[38,13],14],[[39,13],14],[[40,13],14],[[38,41],16],[[11,11,[12,[16]],[12,[29]]],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,[12,[17]]],38],[[3,30,39,[19,[16]]],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42,16],[43,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[44,44],[45,45],[21,21],[43,43],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,[[10,44,11],[[23,[42,16]]]],[[10,44,11],[[23,[43,16]]]],[42,16],[43,16],[[44,13],14],[[45,13],14],[[21,13],14],[[43,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[11,[18,[11]],[18,[11]],[12,[16]],[12,[16]]],42],[[11,[18,[11]],[18,[11]],[12,[16]],[12,[16]]],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[23,[4,16]]],42],[42,16],[43,16],[42,16],[43,16],0,0,[42,16],[43,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0],"c":[],"p":[[5,"MetadataEntities",7],[5,"IpumsDataset",169],[5,"IpumsVariable",169],[1,"tuple"],[5,"VariablesForDataset",7],[8,"IpumsDatasetId",169],[8,"IpumsVariableId",169],[5,"DatasetsForVariable",7],[5,"MicroDataCollection",7],[5,"Context",7],[1,"str"],[6,"Option",485],[5,"Formatter",486],[8,"Result",486],[5,"HashSet",487],[5,"String",488],[5,"PathBuf",489],[1,"slice"],[5,"Vec",490],[5,"Path",489],[6,"InputType",407],[5,"HashMap",491],[6,"Result",492],[5,"TypeId",493],[5,"RecordHierarchyMember",107],[5,"RecordHierarchy",107],[5,"RecordType",107],[5,"RecordWeight",107],[1,"usize"],[6,"IpumsDataType",169],[6,"IpumsValue",169],[6,"UniversalCategoryType",169],[5,"IpumsCategory",169],[1,"bool"],[5,"LayoutVar",283],[5,"RecordLayout",283],[5,"DatasetLayout",283],[6,"DataSource",337],[6,"CompareOperation",337],[5,"Condition",337],[6,"DataPlatform",337],[10,"DataRequest",407],[5,"SimpleRequest",407],[6,"RequestType",407],[6,"OutputFormat",407],[15,"Fixed",279],[15,"String",279],[15,"Parquet",402],[15,"Csv",402],[15,"NativeTable",402]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
